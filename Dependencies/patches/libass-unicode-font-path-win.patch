--- a/libass/ass_font.c	2021-09-12 07:27:04.000000000 +1000
+++ b/libass/ass_font.c	2022-04-11 12:03:22.403348600 +1000
@@ -27,6 +27,8 @@
 #include FT_TRUETYPE_TABLES_H
 #include FT_OUTLINE_H
 #include <limits.h>
+#include <stdio.h>
+#include <stringapiset.h>
 
 #include "ass.h"
 #include "ass_library.h"
@@ -134,7 +136,34 @@ FT_Face ass_face_open(ASS_Library *lib,
                       const char *postscript_name, int index)
 {
     FT_Face face;
-    int error = FT_New_Face(ftlib, path, index, &face);
+    wchar_t wpath[PATH_MAX];
+    FILE *fp = NULL;
+    DWORD WINAPI GetLastError(void);
+    
+    if (MultiByteToWideChar(CP_UTF8, 0, path, -1, wpath, PATH_MAX)) {
+        fp = _wfopen(wpath, L"rb");
+    } else {
+        ass_msg(ftlib, MSGL_WARN,
+                "Error obtaining unicode path for font: '%s', %d (code: %d)", path, index, GetLastError());
+        return -1;
+    }
+    
+    if (fp) {
+        FT_Open_Args args;
+        FT_Stream ftstream = calloc(1, sizeof(FT_StreamRec));
+        ftstream->size  = 0x7FFFFFFF;
+        ftstream->read  = read_stream_font_file;
+        ftstream->close = close_stream_font_file;
+        ftstream->descriptor.pointer = (void  *)
+        memset(&args, 0, sizeof(FT_Open_Args));
+        args.flags  = FT_OPEN_STREAM;
+        args.stream = ftstream;
+        int error = FT_Open_Face(ftlib, &args, index, &face);
+    } else {
+        ass_msg(ftlib, MSGL_WARN,
+                "Error opening font file: '%s', %d (code: %d)", path, index, errno);
+        return -1;
+    }
     if (error) {
         ass_msg(lib, MSGL_WARN, "Error opening font: '%s', %d", path, index);
         return NULL;
@@ -179,6 +208,22 @@ close_stream_font(FT_Stream stream)
     free(stream);
 }
 
+static unsigned long
+read_stream_font_file(FT_Stream stream, unsigned long offset, unsigned char *buffer,
+                 unsigned long count)
+{
+    FILE *fp = (FILE *)stream->descriptor.pointer;
+    _fseeki64(fp, offset, SEEK_SET);
+    return fread(buffer, sizeof(unsigned char), count, fp);
+}
+
+static void
+close_stream_font_file(FT_Stream stream)
+{
+    fclose((FILE *)stream->descriptor.pointer);
+    free(stream);
+}
+
 FT_Face ass_face_stream(ASS_Library *lib, FT_Library ftlib, const char *name,
                         const ASS_FontStream *stream, int index)
 {
