--- a/include/libunwind-common.h.in	2022-04-12 14:04:08.160648100 +1000
+++ b/include/libunwind-common.h.in	2022-04-12 14:03:58.527219400 +1000
@@ -231,8 +231,29 @@ typedef struct unw_save_loc
   }
 unw_save_loc_t;
 
+/* ANDROID support update. */
+typedef struct unw_map_cursor
+  {
+    void *map_list;
+    void *cur_map;
+  }
+unw_map_cursor_t;
+
+typedef struct unw_map
+  {
+    unw_word_t start;
+    unw_word_t end;
+    unw_word_t offset;
+    unw_word_t load_base;
+    char *path;
+    int flags;
+  }
+unw_map_t;
+/* End of ANDROID update. */
+
 /* These routines work both for local and remote unwinding.  */
 
+#define unw_local_access_addr_space_init UNW_OBJ(local_access_addr_space_init)
 #define unw_local_addr_space	UNW_OBJ(local_addr_space)
 #define unw_create_addr_space	UNW_OBJ(create_addr_space)
 #define unw_destroy_addr_space	UNW_OBJ(destroy_addr_space)
@@ -291,5 +312,18 @@ extern int unw_get_proc_name_by_ip (unw_
 				    size_t, unw_word_t *, void *);
 extern const char *unw_strerror (int);
 extern int unw_backtrace (void **, int);
-
+extern void unw_local_access_addr_space_init (unw_addr_space_t);
+/* ANDROID support update. */
+extern int unw_map_local_cursor_valid (unw_map_cursor_t *);
+extern void unw_map_local_cursor_get (unw_map_cursor_t *);
+extern int unw_map_local_cursor_get_next (unw_map_cursor_t *, unw_map_t *);
+extern int unw_map_local_create (void);
+extern void unw_map_local_destroy (void);
+extern void unw_map_set (unw_addr_space_t, unw_map_cursor_t *);
+extern void unw_map_cursor_reset (unw_map_cursor_t *);
+extern void unw_map_cursor_clear (unw_map_cursor_t *);
+extern int unw_map_cursor_create (unw_map_cursor_t *, pid_t);
+extern void unw_map_cursor_destroy (unw_map_cursor_t *);
+extern int unw_map_cursor_get_next (unw_map_cursor_t *, unw_map_t *);
+/* End of ANDROID update. */
 extern unw_addr_space_t unw_local_addr_space;
--- a/src/Makefile.am	2022-04-12 14:04:08.175803000 +1000
+++ b/src/Makefile.am	2022-04-12 14:09:47.114685100 +1000
@@ -559,7 +559,7 @@ endif
 
 if OS_LINUX
  libunwind_la_SOURCES_os	      = $(libunwind_la_SOURCES_os_linux)
- libunwind_la_SOURCES_os_local	      = $(libunwind_la_SOURCES_os_linux_local)
+ libunwind_la_SOURCES_os_local	      = $(libunwind_la_SOURCES_os_linux_local) os-linux.c ptrace/_UPT_accessors.c ptrace/_UPT_access_fpreg.c ptrace/_UPT_access_mem.c ptrace/_UPT_access_reg.c ptrace/_UPT_create.c ptrace/_UPT_destroy.c ptrace/_UPT_find_proc_info.c ptrace/_UPT_get_dyn_info_list_addr.c ptrace/_UPT_put_unwind_info.c ptrace/_UPT_get_proc_name.c ptrace/_UPT_reg_offset.c ptrace/_UPT_resume.c
  libunwind_la_SOURCES_x86_os          = x86/Gos-linux.c
  libunwind_x86_la_SOURCES_os	      = x86/getcontext-linux.S
  libunwind_la_SOURCES_x86_os_local    = x86/Los-linux.c
--- a/src/elfxx.c	2022-04-12 14:04:08.195350500 +1000
+++ b/src/elfxx.c	2022-04-12 14:10:50.203103500 +1000
@@ -34,6 +34,10 @@ WITH THE SOFTWARE OR THE USE OR OTHER DE
 #include <lzma.h>
 #endif /* HAVE_LZMA */
 
+#ifndef MIN
+#define MIN(X, Y) (((X) < (Y)) ? (X) : (Y))
+#endif
+
 static Elf_W (Shdr)*
 elf_w (section_table) (struct elf_image *ei)
 {
